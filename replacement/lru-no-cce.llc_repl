#include "cache.h"

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
	for(uint32_t i = 0; i < NUM_CPUS; i++)
	{
		cce_count[i] = 0; 
        ice_count[i] = 0;
        cce[i]=1;
	}
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
	uint32_t way = 0;


    if(llc_epoch_count> (LLC_SET*LLC_WAY)/8 && !trained)
    {
    	cout<<"In training"<<endl;
    	uint64_t sorted[NUM_CPUS];
    	for(int i = 0; i<NUM_CPUS; i++)
    	{
    		sorted[i]=cce_count[i];
    	}
        trained = 1;
        int outlierFlag=0, cceToAccessRatioFlag=0;
        double median,q1,q3,iqr,lif,uif,lof,uof;
        
      //   for (int i = 0; i < NUM_CPUS-1; i++)      
    		// for (int j = 0; j < NUM_CPUS-i-1; j++)  
      //   	if (sorted[j] > sorted[j+1])  
      //       {
      //       	temp = sorted[j];
      //       	sorted[j] = sorted[j+1];
      //       	sorted[j+1]=temp;
      //       }

        std::sort(sorted,sorted+NUM_CPUS);
        cout<<"after sorting"<<endl;
        median = (sorted[(NUM_CPUS/2)-1]+sorted[(NUM_CPUS/2)])/2;
        cout<<"0"<<endl;
        q1 = (sorted[(NUM_CPUS/4)-1]+sorted[(NUM_CPUS/4)])/2;
        cout<<"1"<<endl;
        q3 = (sorted[NUM_CPUS-((NUM_CPUS/4)-1)-1]+sorted[NUM_CPUS-(NUM_CPUS/4)-1])/2;
        cout<<"2"<<endl;
        iqr = (q3-q1)/8;
        cout<<"3"<<endl;
        uif = q3 + (iqr);
        lif = q1 - (iqr);
        uof = q3 + (iqr);
        lof = q1 - (iqr*1.5);
        cout<<"4"<<endl;
        for(int i = 0; i<NUM_CPUS; i++)
        {   
            if(sorted[i] >uif && sorted[i] > uof)
            {
            	cout<<"outlier detected"<<endl;
            	for(int j = 0; j<NUM_CPUS; j++)
            	{
            		if(cce_count[j] == sorted[i])
            		{
            			cout<<"finding index"<<endl;
            			cce[i]=0;
                		outlierFlag = 1;
                		cout<<"E-id "<<epoch_id<<" Algo, CCE Stopped C-"<<i<<endl;
            		}
            	}
                
            }
        }
        if(outlierFlag == 0)
        {
        	cout<<"No outlier"<<endl;
            for(int i = 0; i < NUM_CPUS; i++)
            {
            	cout<<"cce -"<<cce_count[i]<<", ice-"<<ice_count[i]<<endl;
            	cout<<"ratio"<<(float)cce_count[i]/(float)(cce_count[i]+ice_count[i]+1)<<endl;
            	if((float)cce_count[i]/(float)(cce_count[i]+ice_count[i]+1) > 0.7)
            	{
            		cce[i]=0;
                	cceToAccessRatioFlag = 1;
                	cout<<"E-id "<<epoch_id<<" Ratio, CCE Stopped C-"<<i<<endl;
            	}
            }
        }
        if(outlierFlag == 0 && cceToAccessRatioFlag == 0)
        {
        	printf("\n There is no outlier\n");	
        }
        //cout<<"E-id "<<epoch_id<<" cce["<<position<<"] changed"<<endl;
    }
    //
    if(llc_epoch_count> (LLC_SET*LLC_WAY)/2)
    {
    	cout<<"After epoch completed"<<endl;
        llc_epoch_count = 0;
        trained = 0;
        epoch_id++;
        for(int i=1; i<NUM_CPUS; i++)
        {
            cce[i]=1;
        }
    }


    // fill invalid line first
    for (way=0; way<NUM_WAY; way++) {
        if (block[set][way].valid == false) {

            DP ( if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " lru: " << block[set][way].lru << endl; });

            break;
        }
    }

    // LRU victim
    if (way == (int)(NUM_WAY)){
        if(!cce[cpu])
        {
            int max = -1;
            
                for(way=0; way<NUM_WAY; way++) {
                    if((int)block[set][way].lru > max && block[set][way].cpu == cpu) {
                        max = block[set][way].lru;
                    }
                }
                //If no block is occupied by the cpu, then pick one randomly.
                if(max == -1) {
                    max = rand()%NUM_WAY;
                }  

                for (way=0; way<NUM_WAY; way++) {
                    if (block[set][way].lru == max) {

                        DP ( if (warmup_complete[cpu]) {
                        cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
                        cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                        cout << dec << " lru: " << block[set][way].lru << endl; });

                        break;
                    }
                }
        }
        else if(cce[cpu])
        {
            //cout<<"no invalid line"<<endl;
            for (way=0; way<NUM_WAY; way++) {
                if (block[set][way].lru == NUM_WAY-1) {

                    DP ( if (warmup_complete[cpu]) {
                    cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
                    cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                    cout << dec << " lru: " << block[set][way].lru << endl; });

                    break;
                }
            }

        }
    }




    if (way == NUM_WAY) {
        cerr << "[" << NAME << "] " << __func__ << " no victim! set: " << set << endl;
        assert(0);
    }
    //cout << "### Returning way "<<way<<endl;
	return way;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    return lru_update(set, way);
}

void CACHE::llc_replacement_final_stats()
{

}

