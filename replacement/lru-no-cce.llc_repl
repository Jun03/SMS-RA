#include "cache.h"

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
	for(uint32_t i = 0; i < NUM_CPUS; i++)
	{
		cce_count[i] = 0; 
	}
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    // baseline LRU
    //return lru_victim(cpu, instr_id, set, current_set, ip, full_addr, type); 

	uint32_t way = 0;
/*
    cout << "***Inside llc_find_victim, printing status.***" << endl;
    cout << "current_core"<<cpu<<endl;
    for(int i = 0; i < NUM_WAY; i++)
    {
       cout << "For way " <<i<< " valid " <<block[set][i].valid << " and cpu "<<block[set][i].cpu<<"lru position "<<block[set][i].lru  <<endl; 
    }

    cout << "***Inside llc_find_victim, done printing status.***" << endl;
*/

    // fill invalid line first
    for (way=0; way<NUM_WAY; way++) {
        if (block[set][way].valid == false) {

            DP ( if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " lru: " << block[set][way].lru << endl; });

            break;
        }
    }

    // LRU victim

	int max = -1;
    if (way == (int)(NUM_WAY)){
   // cout<<"No invalid line"<<endl;
	for(way=0; way<NUM_WAY; way++) {
		if((int)block[set][way].lru > max && block[set][way].cpu == cpu) {
			max = block[set][way].lru;
		}
	}
	//cout<<"value of max "<<max;
	//If no block is occupied by the cpu, then pick one randomly.
	if(max == -1) {
		max = rand()%NUM_WAY;
		//cce_count[cpu]++;
		//cross core eviction will occur, so counter is incremented
	}
	/*else
	{
		ice_count[cpu]++;
		//in core eviction will occur
	}*/

        for (way=0; way<NUM_WAY; way++) {
            if (block[set][way].lru == max) {

                DP ( if (warmup_complete[cpu]) {
                cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
                cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                cout << dec << " lru: " << block[set][way].lru << endl; });

                break;
            }
        }
    }

    if (way == NUM_WAY) {
        cerr << "[" << NAME << "] " << __func__ << " no victim! set: " << set << endl;
        assert(0);
    }
    //cout << "### Returning way "<<way<<endl;
	return way;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    return lru_update(set, way);
}

void CACHE::llc_replacement_final_stats()
{

}

